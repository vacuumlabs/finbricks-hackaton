AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.9

  Sample SAM Template for finbricks-hackaton

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 180
    MemorySize: 256

Parameters:
  OpenaiApiKey:
    Type: String
    Description: OPENAI_API_KEY
    Default: "EMPTY"
  PaymentProvider:
    Type: String
    Description: PAYMENT_PROVIDER
    Default: "MOCK_COBS"
  ClientGoal:
    Type: String
    Description: CLIENT_GOAL
    Default: "save 5000 CZK a month"
  ClientIncome:
    Type: String
    Description: CLIENT_INCOME
    Default: "48000 CZK"

Resources:
  FinAdviceInvokeFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: "Asynchronous function to invoke the financial advice message generation"
    Properties:
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      PackageType: Image
      Architectures:
        - x86_64
      Environment:
        Variables:
          SECOND_FUNCTION_ARN: !GetAtt FinAdviceProcessFunction.Arn
          PAYMENT_PROVIDER: !Ref PaymentProvider
          CLIENT_GOAL: !Ref ClientGoal
          CLIENT_INCOME: !Ref ClientIncome
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue # allow secrets to be read
                - lambda:* # allow it to call any lambda in this account
              Resource: '*'
      Events:
        Generate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /invoke
            Method: get
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./fin_advice_invoke
      DockerTag: python3.9-v1
  FinAdviceFetchFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: "Asynchronous function to invoke the financial advice message generation"
    Properties:
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      PackageType: Image
      Architectures:
        - x86_64
      Environment:
        Variables:
          SECOND_FUNCTION_ARN: !GetAtt FinAdviceProcessFunction.Arn
          PAYMENT_PROVIDER: !Ref PaymentProvider
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue # allow secrets to be read
                - lambda:* # allow it to call any lambda in this account
                - dynamodb:* # allow it to operate over dynamodb
              Resource: '*'
      Events:
        Generate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /fetch
            Method: get
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoDBTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./fin_advice_fetch
      DockerTag: python3.9-v1
  FinAdviceProcessFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: "Asynchronous function to process the financial advice message generation"
    Properties:
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      PackageType: Image
      Architectures:
        - x86_64
      Environment:
        Variables:
          AI_FUNCTION_ARN: !GetAtt FinAdviceAiMessageFunction.Arn
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue # allow secrets to be read
                - lambda:* # allow it to call any lambda in this account
                - dynamodb:* # allow it to operate over dynamodb
              Resource: '*'
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoDBTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./fin_advice_process
      DockerTag: python3.9-v1
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  FinAdviceAiMessageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: "Function to return the AI-generated financial advice text"
    Properties:
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Environment:
        Variables:
          OpenaiApiKey: !Ref OpenaiApiKey
      PackageType: Image
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - lambda:*
              Resource: '*'
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./fin_advice_ai_message
      DockerTag: python3.9-v1
  TransactionCategorizationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: "Function to categorize incoming transaction"
    Properties:
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      PackageType: Image
      Environment:
        Variables:
          OpenaiApiKey: !Ref OpenaiApiKey
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue # allow secrets to be read
                - lambda:* # allow it to call any lambda in this account
              Resource: '*'
      Events:
        Generate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /categorize
            Method: post
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./transaction_categorization
      DockerTag: python3.9-v1
  AuthenticationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: "Function to authenticate the client"
    Properties:
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      PackageType: Image
      Environment:
        Variables:
          OpenaiApiKey: !Ref OpenaiApiKey
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue # allow secrets to be read
                - lambda:* # allow it to call any lambda in this account
              Resource: '*'
      Events:
        Generate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /authenticate
            Method: get
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./authentication
      DockerTag: python3.9-v1

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  FinAdviceInvokeApi:
    Description: "API Gateway endpoint URL for Prod stage for FinAdviceInvokeFunction"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/generate/"
  FinAdviceInvokeFunction:
    Description: "FinAdviceInvokeFunction Lambda Function ARN"
    Value: !GetAtt FinAdviceInvokeFunction.Arn
  FinAdviceInvokeFunctionIamRole:
    Description: "Implicit IAM Role created for FinAdviceInvokeFunction function"
    Value: !GetAtt FinAdviceInvokeFunctionRole.Arn

  FinAdviceAiMessageFunction:
    Description: "FinAdviceAiMessageFunction Lambda Function ARN"
    Value: !GetAtt FinAdviceAiMessageFunction.Arn
  FinAdviceAiMessageFunctionIamRole:
    Description: "Implicit IAM Role created for FinAdviceAiMessageFunction function"
    Value: !GetAtt FinAdviceAiMessageFunctionRole.Arn

  TransactionCategorizationApi:
    Description: "API Gateway endpoint URL for Prod stage for TransactionCategorizationFunction"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/categorize/"
  TransactionCategorizationFunction:
    Description: "FinAdviceInvokeFunction Lambda Function ARN"
    Value: !GetAtt TransactionCategorizationFunction.Arn
  TransactionCategorizationFunctionIamRole:
    Description: "Implicit IAM Role created for FinAdviceInvokeFunction function"
    Value: !GetAtt TransactionCategorizationFunctionRole.Arn

  AuthenticationApi:
    Description: "API Gateway endpoint URL for Prod stage for AuthenticationFunction"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/authenticate/"
  AuthenticationFunction:
    Description: "AuthenticationFunction Lambda Function ARN"
    Value: !GetAtt AuthenticationFunction.Arn
  AuthenticationFunctionIamRole:
    Description: "Implicit IAM Role created for AuthenticationFunction function"
    Value: !GetAtt AuthenticationFunctionRole.Arn
